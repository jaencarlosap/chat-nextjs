{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n// importamos Component de React\nimport { Component } from 'react'; // importamos el client de socket.io\n\nimport io from 'socket.io-client'; // importamos fetch\n\nimport fetch from 'isomorphic-fetch';\n\nvar HomePage = /*#__PURE__*/function (_Component) {\n  _inherits(HomePage, _Component);\n\n  var _super = _createSuper(HomePage);\n\n  function HomePage() {\n    var _this;\n\n    _classCallCheck(this, HomePage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      field: '',\n      messages: _this.props.messages\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleMessage\", function (message) {\n      _this.setState(function (state) {\n        return {\n          messages: state.messages.concat(message)\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (event) {\n      _this.setState({\n        field: event.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmit\", function (event) {\n      event.preventDefault(); // creamos un objeto message con la fecha actual como ID y el valor del input\n\n      var message = {\n        id: new Date().getTime(),\n        value: _this.state.field\n      }; // enviamos el objeto por socket al servidor\n\n      _this.socket.emit('message', message); // lo agregamos a nuestro estado para que se muestre en pantalla y limpiamos el input\n\n\n      _this.setState(function (state) {\n        return {\n          field: '',\n          messages: state.messages.concat(message)\n        };\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(HomePage, [{\n    key: \"componentDidMount\",\n    // una vez que el componente se mont칩 en el navegador nos conectamos al servidor de sockets\n    // y empezamos a recibimos el evento `message` del servidor\n    value: function componentDidMount() {\n      this.socket = io('http://localhost:3000/');\n      this.socket.on('message', this.handleMessage);\n    } // cuando el componente se va a desmontar es importante que dejemos de escuchar el evento\n    // y que cerremos la conexi칩n por sockets, esto es para evitar problemas de que lleguen mensajes\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.socket.off('message', this.handleMessage);\n      this.socket.close();\n    } // cuando llega un mensaje del servidor lo agregamos al estado de nuestra p치gina\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"main\", null, __jsx(\"div\", null, __jsx(\"ul\", null, this.state.messages.map(function (message) {\n        return __jsx(\"li\", {\n          key: message.id\n        }, __jsx(\"span\", {\n          className: \"hljs-name\"\n        }, message.value));\n      })), __jsx(\"form\", {\n        onSubmit: this.handleSubmit\n      }, __jsx(\"input\", {\n        onChange: this.handleChange,\n        type: \"text\",\n        placeholder: \"Hola Platzi!\",\n        value: this.state.field\n      }), __jsx(\"button\", null, \"Enviar\"))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    // ac치 pedimos los datos de los mensajes viejos, esto se ejecuta tanto en el cliente como en el servidor\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var req, response, messages;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                req = _ref.req;\n                _context.next = 3;\n                return fetch('http://localhost:3000/messages');\n\n              case 3:\n                response = _context.sent;\n                _context.next = 6;\n                return response.json();\n\n              case 6:\n                messages = _context.sent;\n                return _context.abrupt(\"return\", {\n                  messages: messages\n                });\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return HomePage;\n}(Component);\n\n_defineProperty(HomePage, \"defaultProps\", {\n  messages: []\n});\n\nexport default HomePage;","map":null,"metadata":{},"sourceType":"module"}