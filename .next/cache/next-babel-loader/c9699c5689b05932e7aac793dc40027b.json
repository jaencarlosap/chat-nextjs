{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// importamos Component de React\nimport { Component } from 'react'; // importamos el client de socket.io\n\nimport io from 'socket.io-client'; // importamos fetch\n\nimport fetch from 'isomorphic-fetch';\n\nclass HomePage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      field: '',\n      messages: this.props.messages\n    });\n\n    _defineProperty(this, \"handleMessage\", message => {\n      this.setState(state => ({\n        messages: state.messages.concat(message)\n      }));\n    });\n\n    _defineProperty(this, \"handleChange\", event => {\n      this.setState({\n        field: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"handleSubmit\", event => {\n      event.preventDefault(); // creamos un objeto message con la fecha actual como ID y el valor del input\n\n      const message = {\n        id: new Date().getTime(),\n        value: this.state.field\n      }; // enviamos el objeto por socket al servidor\n\n      this.socket.emit('message', message); // lo agregamos a nuestro estado para que se muestre en pantalla y limpiamos el input\n\n      this.setState(state => ({\n        field: '',\n        messages: state.messages.concat(message)\n      }));\n    });\n  }\n\n  // acá pedimos los datos de los mensajes viejos, esto se ejecuta tanto en el cliente como en el servidor\n  static async getInitialProps({\n    req\n  }) {\n    const response = await fetch('http://localhost:3000/messages');\n    const messages = await response.json();\n    return {\n      messages\n    };\n  }\n\n  // una vez que el componente se montó en el navegador nos conectamos al servidor de sockets\n  // y empezamos a recibimos el evento `message` del servidor\n  componentDidMount() {\n    this.socket = io('http://localhost:3000/');\n    this.socket.on('message', this.handleMessage);\n  } // cuando el componente se va a desmontar es importante que dejemos de escuchar el evento\n  // y que cerremos la conexión por sockets, esto es para evitar problemas de que lleguen mensajes\n\n\n  componentWillUnmount() {\n    this.socket.off('message', this.handleMessage);\n    this.socket.close();\n  } // cuando llega un mensaje del servidor lo agregamos al estado de nuestra página\n\n\n  render() {\n    return __jsx(\"main\", null, __jsx(\"div\", null, __jsx(\"ul\", null, this.state.messages.map(message => __jsx(\"li\", {\n      key: message.id\n    }, __jsx(\"span\", {\n      className: \"hljs-name\"\n    }, message.value)))), __jsx(\"form\", {\n      onSubmit: this.handleSubmit\n    }, __jsx(\"input\", {\n      onChange: this.handleChange,\n      type: \"text\",\n      placeholder: \"Hola Platzi!\",\n      value: this.state.field\n    }), __jsx(\"button\", null, \"Enviar\"))));\n  }\n\n}\n\n_defineProperty(HomePage, \"defaultProps\", {\n  messages: []\n});\n\nexport default HomePage;","map":{"version":3,"sources":["/Users/jaencarlosaponte/Documents/Proyects/next_with_socket/pages/index.js"],"names":["Component","io","fetch","HomePage","field","messages","props","message","setState","state","concat","event","target","value","preventDefault","id","Date","getTime","socket","emit","getInitialProps","req","response","json","componentDidMount","on","handleMessage","componentWillUnmount","off","close","render","map","handleSubmit","handleChange"],"mappings":";;;;;AAAA;AACA,SAASA,SAAT,QAA0B,OAA1B,C,CACA;;AACA,OAAOC,EAAP,MAAe,kBAAf,C,CACA;;AACA,OAAOC,KAAP,MAAkB,kBAAlB;;AAEA,MAAMC,QAAN,SAAuBH,SAAvB,CAAiC;AAAA;AAAA;;AAAA,mCAarB;AACJI,MAAAA,KAAK,EAAE,EADH;AAEJC,MAAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWD;AAFjB,KAbqB;;AAAA,2CAiCZE,OAAD,IAAa;AACzB,WAAKC,QAAL,CAAcC,KAAK,KAAK;AAAEJ,QAAAA,QAAQ,EAAEI,KAAK,CAACJ,QAAN,CAAeK,MAAf,CAAsBH,OAAtB;AAAZ,OAAL,CAAnB;AACH,KAnC4B;;AAAA,0CAsCdI,KAAK,IAAI;AACpB,WAAKH,QAAL,CAAc;AAAEJ,QAAAA,KAAK,EAAEO,KAAK,CAACC,MAAN,CAAaC;AAAtB,OAAd;AACH,KAxC4B;;AAAA,0CA2CdF,KAAK,IAAI;AACpBA,MAAAA,KAAK,CAACG,cAAN,GADoB,CAGpB;;AACA,YAAMP,OAAO,GAAG;AACZQ,QAAAA,EAAE,EAAG,IAAIC,IAAJ,EAAD,CAAaC,OAAb,EADQ;AAEZJ,QAAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWL;AAFN,OAAhB,CAJoB,CASpB;;AACA,WAAKc,MAAL,CAAYC,IAAZ,CAAiB,SAAjB,EAA4BZ,OAA5B,EAVoB,CAYpB;;AACA,WAAKC,QAAL,CAAcC,KAAK,KAAK;AACpBL,QAAAA,KAAK,EAAE,EADa;AAEpBC,QAAAA,QAAQ,EAAEI,KAAK,CAACJ,QAAN,CAAeK,MAAf,CAAsBH,OAAtB;AAFU,OAAL,CAAnB;AAIH,KA5D4B;AAAA;;AAC7B;AACA,eAAaa,eAAb,CAA6B;AAAEC,IAAAA;AAAF,GAA7B,EAAsC;AAClC,UAAMC,QAAQ,GAAG,MAAMpB,KAAK,CAAC,gCAAD,CAA5B;AACA,UAAMG,QAAQ,GAAG,MAAMiB,QAAQ,CAACC,IAAT,EAAvB;AACA,WAAO;AAAElB,MAAAA;AAAF,KAAP;AACH;;AAYD;AACA;AACAmB,EAAAA,iBAAiB,GAAG;AAChB,SAAKN,MAAL,GAAcjB,EAAE,CAAC,wBAAD,CAAhB;AACA,SAAKiB,MAAL,CAAYO,EAAZ,CAAe,SAAf,EAA0B,KAAKC,aAA/B;AACH,GAvB4B,CAyB7B;AACA;;;AACAC,EAAAA,oBAAoB,GAAG;AACnB,SAAKT,MAAL,CAAYU,GAAZ,CAAgB,SAAhB,EAA2B,KAAKF,aAAhC;AACA,SAAKR,MAAL,CAAYW,KAAZ;AACH,GA9B4B,CAgC7B;;;AA8BAC,EAAAA,MAAM,GAAG;AACL,WACI,oBACI,mBACI,kBAEK,KAAKrB,KAAL,CAAWJ,QAAX,CAAoB0B,GAApB,CAAwBxB,OAAO,IAC5B;AAAI,MAAA,GAAG,EAAEA,OAAO,CAACQ;AAAjB,OACI;AAAM,MAAA,SAAS,EAAC;AAAhB,OACKR,OAAO,CAACM,KADb,CADJ,CADH,CAFL,CADJ,EAYI;AAAM,MAAA,QAAQ,EAAE,KAAKmB;AAArB,OACI;AACI,MAAA,QAAQ,EAAE,KAAKC,YADnB;AAEI,MAAA,IAAI,EAAC,MAFT;AAGI,MAAA,WAAW,EAAC,cAHhB;AAII,MAAA,KAAK,EAAE,KAAKxB,KAAL,CAAWL;AAJtB,MADJ,EAOI,+BAPJ,CAZJ,CADJ,CADJ;AA0BH;;AAzF4B;;gBAA3BD,Q,kBAQoB;AAClBE,EAAAA,QAAQ,EAAE;AADQ,C;;AAoF1B,eAAeF,QAAf","sourcesContent":["// importamos Component de React\nimport { Component } from 'react'\n// importamos el client de socket.io\nimport io from 'socket.io-client'\n// importamos fetch\nimport fetch from 'isomorphic-fetch'\n\nclass HomePage extends Component {\n    // acá pedimos los datos de los mensajes viejos, esto se ejecuta tanto en el cliente como en el servidor\n    static async getInitialProps({ req }) {\n        const response = await fetch('http://localhost:3000/messages')\n        const messages = await response.json()\n        return { messages }\n    }\n\n    static defaultProps = {\n        messages: []\n    }\n\n    // en el estado guardamos un string vacío (el campo del formulario) y los mensajes que recibimos del API\n    state = {\n        field: '',\n        messages: this.props.messages\n    }\n\n    // una vez que el componente se montó en el navegador nos conectamos al servidor de sockets\n    // y empezamos a recibimos el evento `message` del servidor\n    componentDidMount() {\n        this.socket = io('http://localhost:3000/')\n        this.socket.on('message', this.handleMessage)\n    }\n\n    // cuando el componente se va a desmontar es importante que dejemos de escuchar el evento\n    // y que cerremos la conexión por sockets, esto es para evitar problemas de que lleguen mensajes\n    componentWillUnmount() {\n        this.socket.off('message', this.handleMessage)\n        this.socket.close()\n    }\n\n    // cuando llega un mensaje del servidor lo agregamos al estado de nuestra página\n    handleMessage = (message) => {\n        this.setState(state => ({ messages: state.messages.concat(message) }))\n    }\n\n    // cuando el valor del input cambia actualizamos el estado de nuestra página\n    handleChange = event => {\n        this.setState({ field: event.target.value })\n    }\n\n    // cuando se envía el formulario enviamos el mensaje al servidor\n    handleSubmit = event => {\n        event.preventDefault()\n\n        // creamos un objeto message con la fecha actual como ID y el valor del input\n        const message = {\n            id: (new Date()).getTime(),\n            value: this.state.field\n        }\n\n        // enviamos el objeto por socket al servidor\n        this.socket.emit('message', message)\n\n        // lo agregamos a nuestro estado para que se muestre en pantalla y limpiamos el input\n        this.setState(state => ({\n            field: '',\n            messages: state.messages.concat(message)\n        }))\n    }\n\n    render() {\n        return (\n            <main>\n                <div>\n                    <ul>\n                        {/* acá renderizamos cada mensaje */}\n                        {this.state.messages.map(message =>\n                            <li key={message.id} >\n                                <span className=\"hljs-name\">\n                                    {message.value}\n                                </span>\n                            </li>\n                        )}\n                    </ul>\n                    {/* nuestro formulario */}\n                    <form onSubmit={this.handleSubmit}>\n                        <input\n                            onChange={this.handleChange}\n                            type='text'\n                            placeholder='Hola Platzi!'\n                            value={this.state.field}\n                        />\n                        <button>Enviar</button>\n                    </form>\n                </div>\n            </main>\n        )\n    }\n}\n\nexport default HomePage"]},"metadata":{},"sourceType":"module"}