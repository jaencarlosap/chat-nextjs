{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n// importamos Component de React\nimport { Component } from 'react'; // importamos el client de socket.io\n\nimport io from 'socket.io-client'; // importamos fetch\n\nimport fetch from 'isomorphic-fetch';\n\nvar HomePage = /*#__PURE__*/function (_Component) {\n  _inherits(HomePage, _Component);\n\n  var _super = _createSuper(HomePage);\n\n  function HomePage() {\n    var _this;\n\n    _classCallCheck(this, HomePage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      field: '',\n      messages: _this.props.messages\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleMessage\", function (message) {\n      _this.setState(function (state) {\n        return {\n          messages: state.messages.concat(message)\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (event) {\n      _this.setState({\n        field: event.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmit\", function (event) {\n      event.preventDefault(); // creamos un objeto message con la fecha actual como ID y el valor del input\n\n      var message = {\n        id: new Date().getTime(),\n        value: _this.state.field\n      }; // enviamos el objeto por socket al servidor\n\n      _this.socket.emit('message', message); // lo agregamos a nuestro estado para que se muestre en pantalla y limpiamos el input\n\n\n      _this.setState(function (state) {\n        return {\n          field: '',\n          messages: state.messages.concat(message)\n        };\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(HomePage, [{\n    key: \"componentDidMount\",\n    // una vez que el componente se montó en el navegador nos conectamos al servidor de sockets\n    // y empezamos a recibimos el evento `message` del servidor\n    value: function componentDidMount() {\n      this.socket = io('http://localhost:3000/');\n      this.socket.on('message', this.handleMessage);\n    } // cuando el componente se va a desmontar es importante que dejemos de escuchar el evento\n    // y que cerremos la conexión por sockets, esto es para evitar problemas de que lleguen mensajes\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.socket.off('message', this.handleMessage);\n      this.socket.close();\n    } // cuando llega un mensaje del servidor lo agregamos al estado de nuestra página\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"main\", null, __jsx(\"div\", null, __jsx(\"ul\", null, this.state.messages.map(function (message) {\n        return __jsx(\"li\", {\n          key: message.id\n        }, __jsx(\"span\", {\n          \"class\": \"hljs-name\"\n        }, message.value));\n      })), __jsx(\"form\", {\n        onSubmit: this.handleSubmit\n      }, __jsx(\"input\", {\n        onChange: this.handleChange,\n        type: \"text\",\n        placeholder: \"Hola Platzi!\",\n        value: this.state.field\n      }), __jsx(\"button\", null, \"Enviar\"))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    // acá pedimos los datos de los mensajes viejos, esto se ejecuta tanto en el cliente como en el servidor\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var req, response, messages;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                req = _ref.req;\n                _context.next = 3;\n                return fetch('http://localhost:3000/messages');\n\n              case 3:\n                response = _context.sent;\n                _context.next = 6;\n                return response.json();\n\n              case 6:\n                messages = _context.sent;\n                return _context.abrupt(\"return\", {\n                  messages: messages\n                });\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return HomePage;\n}(Component);\n\n_defineProperty(HomePage, \"defaultProps\", {\n  messages: []\n});\n\nexport default HomePage;","map":{"version":3,"sources":["/Users/jaencarlosaponte/Documents/Proyects/next_with_socket/pages/index.js"],"names":["Component","io","fetch","HomePage","field","messages","props","message","setState","state","concat","event","target","value","preventDefault","id","Date","getTime","socket","emit","on","handleMessage","off","close","map","handleSubmit","handleChange","req","response","json"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA,SAASA,SAAT,QAA0B,OAA1B,C,CACA;;AACA,OAAOC,EAAP,MAAe,kBAAf,C,CACA;;AACA,OAAOC,KAAP,MAAkB,kBAAlB;;IAEMC,Q;;;;;;;;;;;;;;;;4DAaM;AACJC,MAAAA,KAAK,EAAE,EADH;AAEJC,MAAAA,QAAQ,EAAE,MAAKC,KAAL,CAAWD;AAFjB,K;;oEAoBQ,UAACE,OAAD,EAAa;AACzB,YAAKC,QAAL,CAAc,UAAAC,KAAK;AAAA,eAAK;AAAEJ,UAAAA,QAAQ,EAAEI,KAAK,CAACJ,QAAN,CAAeK,MAAf,CAAsBH,OAAtB;AAAZ,SAAL;AAAA,OAAnB;AACH,K;;mEAGc,UAAAI,KAAK,EAAI;AACpB,YAAKH,QAAL,CAAc;AAAEJ,QAAAA,KAAK,EAAEO,KAAK,CAACC,MAAN,CAAaC;AAAtB,OAAd;AACH,K;;mEAGc,UAAAF,KAAK,EAAI;AACpBA,MAAAA,KAAK,CAACG,cAAN,GADoB,CAGpB;;AACA,UAAMP,OAAO,GAAG;AACZQ,QAAAA,EAAE,EAAG,IAAIC,IAAJ,EAAD,CAAaC,OAAb,EADQ;AAEZJ,QAAAA,KAAK,EAAE,MAAKJ,KAAL,CAAWL;AAFN,OAAhB,CAJoB,CASpB;;AACA,YAAKc,MAAL,CAAYC,IAAZ,CAAiB,SAAjB,EAA4BZ,OAA5B,EAVoB,CAYpB;;;AACA,YAAKC,QAAL,CAAc,UAAAC,KAAK;AAAA,eAAK;AACpBL,UAAAA,KAAK,EAAE,EADa;AAEpBC,UAAAA,QAAQ,EAAEI,KAAK,CAACJ,QAAN,CAAeK,MAAf,CAAsBH,OAAtB;AAFU,SAAL;AAAA,OAAnB;AAIH,K;;;;;;;AA1CD;AACA;wCACoB;AAChB,WAAKW,MAAL,GAAcjB,EAAE,CAAC,wBAAD,CAAhB;AACA,WAAKiB,MAAL,CAAYE,EAAZ,CAAe,SAAf,EAA0B,KAAKC,aAA/B;AACH,K,CAED;AACA;;;;2CACuB;AACnB,WAAKH,MAAL,CAAYI,GAAZ,CAAgB,SAAhB,EAA2B,KAAKD,aAAhC;AACA,WAAKH,MAAL,CAAYK,KAAZ;AACH,K,CAED;;;;6BA8BS;AACL,aACI,oBACI,mBACI,kBAEK,KAAKd,KAAL,CAAWJ,QAAX,CAAoBmB,GAApB,CAAwB,UAAAjB,OAAO;AAAA,eAC5B;AAAI,UAAA,GAAG,EAAEA,OAAO,CAACQ;AAAjB,WACI;AAAM,mBAAM;AAAZ,WACKR,OAAO,CAACM,KADb,CADJ,CAD4B;AAAA,OAA/B,CAFL,CADJ,EAYI;AAAM,QAAA,QAAQ,EAAE,KAAKY;AAArB,SACI;AACI,QAAA,QAAQ,EAAE,KAAKC,YADnB;AAEI,QAAA,IAAI,EAAC,MAFT;AAGI,QAAA,WAAW,EAAC,cAHhB;AAII,QAAA,KAAK,EAAE,KAAKjB,KAAL,CAAWL;AAJtB,QADJ,EAOI,+BAPJ,CAZJ,CADJ,CADJ;AA0BH;;;AAxFD;;;;;;;;AAC+BuB,gBAAAA,G,QAAAA,G;;uBACJzB,KAAK,CAAC,gCAAD,C;;;AAAtB0B,gBAAAA,Q;;uBACiBA,QAAQ,CAACC,IAAT,E;;;AAAjBxB,gBAAAA,Q;iDACC;AAAEA,kBAAAA,QAAQ,EAARA;AAAF,iB;;;;;;;;;;;;;;;;;;;EALQL,S;;gBAAjBG,Q,kBAQoB;AAClBE,EAAAA,QAAQ,EAAE;AADQ,C;;AAoF1B,eAAeF,QAAf","sourcesContent":["// importamos Component de React\nimport { Component } from 'react'\n// importamos el client de socket.io\nimport io from 'socket.io-client'\n// importamos fetch\nimport fetch from 'isomorphic-fetch'\n\nclass HomePage extends Component {\n    // acá pedimos los datos de los mensajes viejos, esto se ejecuta tanto en el cliente como en el servidor\n    static async getInitialProps({ req }) {\n        const response = await fetch('http://localhost:3000/messages')\n        const messages = await response.json()\n        return { messages }\n    }\n\n    static defaultProps = {\n        messages: []\n    }\n\n    // en el estado guardamos un string vacío (el campo del formulario) y los mensajes que recibimos del API\n    state = {\n        field: '',\n        messages: this.props.messages\n    }\n\n    // una vez que el componente se montó en el navegador nos conectamos al servidor de sockets\n    // y empezamos a recibimos el evento `message` del servidor\n    componentDidMount() {\n        this.socket = io('http://localhost:3000/')\n        this.socket.on('message', this.handleMessage)\n    }\n\n    // cuando el componente se va a desmontar es importante que dejemos de escuchar el evento\n    // y que cerremos la conexión por sockets, esto es para evitar problemas de que lleguen mensajes\n    componentWillUnmount() {\n        this.socket.off('message', this.handleMessage)\n        this.socket.close()\n    }\n\n    // cuando llega un mensaje del servidor lo agregamos al estado de nuestra página\n    handleMessage = (message) => {\n        this.setState(state => ({ messages: state.messages.concat(message) }))\n    }\n\n    // cuando el valor del input cambia actualizamos el estado de nuestra página\n    handleChange = event => {\n        this.setState({ field: event.target.value })\n    }\n\n    // cuando se envía el formulario enviamos el mensaje al servidor\n    handleSubmit = event => {\n        event.preventDefault()\n\n        // creamos un objeto message con la fecha actual como ID y el valor del input\n        const message = {\n            id: (new Date()).getTime(),\n            value: this.state.field\n        }\n\n        // enviamos el objeto por socket al servidor\n        this.socket.emit('message', message)\n\n        // lo agregamos a nuestro estado para que se muestre en pantalla y limpiamos el input\n        this.setState(state => ({\n            field: '',\n            messages: state.messages.concat(message)\n        }))\n    }\n\n    render() {\n        return (\n            <main>\n                <div>\n                    <ul>\n                        {/* acá renderizamos cada mensaje */}\n                        {this.state.messages.map(message =>\n                            <li key={message.id} >\n                                <span class=\"hljs-name\">\n                                    {message.value}\n                                </span>\n                            </li>\n                        )}\n                    </ul>\n                    {/* nuestro formulario */}\n                    <form onSubmit={this.handleSubmit}>\n                        <input\n                            onChange={this.handleChange}\n                            type='text'\n                            placeholder='Hola Platzi!'\n                            value={this.state.field}\n                        />\n                        <button>Enviar</button>\n                    </form>\n                </div>\n            </main>\n        )\n    }\n}\n\nexport default HomePage"]},"metadata":{},"sourceType":"module"}